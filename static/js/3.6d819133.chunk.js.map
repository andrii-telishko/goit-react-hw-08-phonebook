{"version":3,"sources":["redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","views/ContactsView/ContactsView.js"],"names":["getFilter","state","filter","getLoader","loading","getFilteredContacts","createSelector","contacts","name","toLowerCase","includes","ContactForm","number","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","allContacts","find","contact","alert","onSubmit","reset","this","className","type","onChange","Component","connect","dispatch","contactsOperations","addContact","contactsActions","changeFilter","target","ContactItem","defaultProps","ContactsList","fetchContacts","isLoadingContacts","map","id","onClick","deleteContact","ContactsView"],"mappings":"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","file":"static/js/3.6d819133.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getAllContacts = state => state.contacts;\r\nexport const getFilter = state => state.filter;\r\nexport const getLoader = state => state.loading;\r\n\r\nexport const getFilteredContacts = createSelector([getAllContacts, getFilter],\r\n    ({ contacts, filter }) => {\r\n        return contacts.filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase()));\r\n    });","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactForm.scss'\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations } from '../../redux/contacts'\r\nimport { getFilteredContacts } from '../../redux/contacts/contactsSelectors'\r\nimport '../../styles/base.scss';\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        onSubmit: PropTypes.func.isRequired\r\n    };\r\n\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ [e.currentTarget.name]: e.currentTarget.value });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, number } = this.state;\r\n\r\n        if (name !== '' && number !== '') {\r\n            this.props.allContacts.find(contact => contact.number === number)\r\n                ? alert('Hello')\r\n                : this.props.onSubmit(name, number);\r\n            this.reset();\r\n        } else { alert('Please fill empty fields') }\r\n    };\r\n\r\n    reset() {\r\n        this.setState({ name: '', number: '' });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='contacts-form'>\r\n                <label className='label'>\r\n                    Name<input\r\n                        type=\"text\"\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange}\r\n                        name=\"name\"\r\n                        className='input' />\r\n                </label>\r\n                <label className='label'>\r\n                    Number<input\r\n                        type=\"tel\"\r\n                        value={this.state.number}\r\n                        onChange={this.handleChange}\r\n                        name=\"number\"\r\n                        className='input' />\r\n                </label>\r\n                <button type=\"submit\" className='button contacts-form__button'>Add contact</button>\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    allContacts: getFilteredContacts(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(contactsOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { contactsActions } from '../../redux/contacts';\r\nimport { getFilter } from '../../redux/contacts/contactsSelectors';\r\nimport '../../styles/base.scss';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n    return (\r\n        <label className='label'>\r\n            Find contact by name\r\n            <input\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={onChange}\r\n                className='input' />\r\n        </label>\r\n    );\r\n};\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    value: getFilter(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactItem.scss'\r\n\r\nconst ContactItem = ({ name, number }) => {\r\n    return (<>\r\n        <span className='contact-name'>{name}: </span>\r\n        <span className='contact-number'>{number}</span>\r\n    </>);\r\n};\r\n\r\nContactItem.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string\r\n}\r\n\r\nContactItem.defaultProps = {\r\n    name: \"Mickey Mouse\",\r\n    number: 123456789\r\n};\r\n\r\nexport default ContactItem;","import React, { Component } from 'react';\r\nimport ContactItem from '../ContactItem';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations } from '../../redux/contacts'\r\nimport { getLoader, getFilteredContacts } from '../../redux/contacts/contactsSelectors'\r\nimport PropTypes from 'prop-types';\r\nimport '../../styles/base.scss'\r\nimport './ContactList.scss';\r\n\r\nclass ContactsList extends Component {\r\n    static propTypes = {\r\n        contacts: PropTypes.array.isRequired,\r\n        onClick: PropTypes.func.isRequired\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.fetchContacts();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isLoadingContacts && <h1>Loading...</h1>}\r\n                <ul className='contact-list'>\r\n                    {this.props.contacts.map(({ id, name, number }) => {\r\n                        return (<li key={id} className='contact-item'><ContactItem\r\n                            name={name}\r\n                            number={number} />\r\n                            <button type='button'\r\n                                onClick={() => { this.props.onClick(id) }} className='button contact-item__button'>Delete</button>\r\n                        </li>)\r\n                    })}\r\n                </ul>\r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: getFilteredContacts(state),\r\n    isLoadingContacts: getLoader(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onClick: id => dispatch(contactsOperations.deleteContact(id)),\r\n    fetchContacts: () => dispatch(contactsOperations.fetchContacts())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);","import React from 'react';\r\nimport ContactForm from '../../components/ContactForm';\r\nimport Filter from '../../components/Filter';\r\nimport ContactsList from '../../components/ContactList'\r\n\r\nconst ContactsView = () => (\r\n    <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactsList />\r\n    </>);\r\n\r\nexport default ContactsView;"],"sourceRoot":""}